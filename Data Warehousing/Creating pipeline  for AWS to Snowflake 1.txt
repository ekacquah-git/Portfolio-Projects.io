//Creating a storage integration object to connect with S3 bucket to AWS

CREATE OR REPLACE storage integration s3_int
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = S3
  ENABLED = TRUE 
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::824368188939:role/snowflake-access-role'
  STORAGE_ALLOWED_LOCATIONS = ('s3://snowflakes3bucket-portfolioexea/csv/', 's3://snowflakes3bucket-portfolioexea/json/')
   COMMENT = 'establishing connection to AWS s3 bucket' ;
//Listing out the properties of the integration object to obtain ARN for role and External ID to establish trusted relationship

DESC INTEGRATION s3_int;

// Create table first
CREATE OR REPLACE TABLE MANAGE_DB.PUBLIC.movie_titles (
  show_id STRING,
  type STRING,
  title STRING,
  director STRING,
  cast STRING,
  country STRING,
  date_added STRING,
  release_year STRING,
  rating STRING,
  duration STRING,
  listed_in STRING,
  description STRING )

//Create schema for file format
CREATE OR REPLACE SCHEMA file_formats

// Create file format object
CREATE OR REPLACE file format file_formats.csv_fileformat
    type = csv
    field_delimiter = ','
    skip_header = 1
    null_if = ('NULL','null')
    empty_field_as_null = TRUE;
    
    
 // Create stage object with integration object & file format object
CREATE OR REPLACE stage MANAGE_DB.external_stages.csv_folder
    URL = 's3://snowflakes3bucket-portfolioexea/csv/'
    STORAGE_INTEGRATION = s3_int
    FILE_FORMAT = MANAGE_DB.file_formats.csv_fileformat
        
// Update file format object to update text qualifiers based on file being copied over
CREATE OR REPLACE file format MANAGE_DB.file_formats.csv_fileformat
    type = csv
    field_delimiter = ','
    skip_header = 1
    null_if = ('NULL','null')
    empty_field_as_null = TRUE    
    FIELD_OPTIONALLY_ENCLOSED_BY = '"'    

// Use Copy command to build pipeling from AWS to Snowflake       
COPY INTO MANAGE_DB.PUBLIC.movie_titles
    FROM @MANAGE_DB.external_stages.csv_folder
    
SELECT * FROM MANAGE_DB.PUBLIC.movie_titles;
    
//Now working with a JSON file, creating file formats and stge object for JSON file types
CREATE OR REPLACE file format MANAGE_DB.file_formats.json_fileformat
    TYPE = JSON;
// Linking JSON file format to stage object pulling from json folder in AWS s3 bucket    
CREATE OR REPLACE stage MANAGE_DB.external_stages.json_folder
    URL = 's3://snowflakes3bucket-portfolioexea/json/'
    STORAGE_INTEGRATION = s3_int
    FILE_FORMAT = MANAGE_DB.file_formats.json_fileformat;
    
//Querying the json_folder to view json file that was pulled
SELECT * FROM @MANAGE_DB.external_stages.json_folder;

// Querying columns from json file
SELECT 
$1:asin,
$1:helpful,
$1:overall,
$1:reviewText,
$1:reviewTime,
$1:reviewerID,
$1:reviewTime,
$1:reviewerName,
$1:summary,
$1:unixReviewTime
FROM @MANAGE_DB.external_stages.json_folder

// Format queried columns & use DATE function to convert INT data type for a time into date format as an added column
SELECT 
$1:asin::STRING as ASIN,
$1:helpful as helpful,
$1:overall as overall,
$1:reviewText::STRING as reviewtext,
$1:reviewTime::STRING,
$1:reviewerID::STRING,
$1:reviewTime::STRING,
$1:reviewerName::STRING,
$1:summary::STRING,
DATE($1:unixReviewTime::int) as Revewtime
FROM @MANAGE_DB.external_stages.json_folder


// Use DATE_FROM_PARTS on reviewtime column to transform to date data type. Using added column to confirm accuracy
//Case query added to correct instances of day being single vs double digit values
SELECT 
$1:asin::STRING as ASIN,
$1:helpful as helpful,
$1:overall as overall,
$1:reviewText::STRING as reviewtext,
DATE_FROM_PARTS( 
  RIGHT($1:reviewTime::STRING,4), 
  LEFT($1:reviewTime::STRING,2), 
  CASE WHEN SUBSTRING($1:reviewTime::STRING,5,1)=',' 
        THEN SUBSTRING($1:reviewTime::STRING,4,1) ELSE SUBSTRING($1:reviewTime::STRING,4,2) END),
$1:reviewerID::STRING,
$1:reviewTime::STRING,
$1:reviewerName::STRING,
$1:summary::STRING,
DATE($1:unixReviewTime::int) as UnixRevewtime
FROM @MANAGE_DB.external_stages.json_folder


// Create table to hold queried data
CREATE OR REPLACE TABLE MANAGE_DB.PUBLIC.reviews (
asin STRING,
helpful STRING,
overall STRING,
reviewtext STRING,
reviewtime DATE,
reviewerid STRING,
reviewername STRING,
summary STRING,
unixreviewtime DATE
)

// Copy transformed data into destination table
COPY INTO MANAGE_DB.PUBLIC.reviews
    FROM (SELECT 
$1:asin::STRING as ASIN,
$1:helpful as helpful,
$1:overall as overall,
$1:reviewText::STRING as reviewtext,
DATE_FROM_PARTS( 
  RIGHT($1:reviewTime::STRING,4), 
  LEFT($1:reviewTime::STRING,2), 
  CASE WHEN SUBSTRING($1:reviewTime::STRING,5,1)=',' 
        THEN SUBSTRING($1:reviewTime::STRING,4,1) ELSE SUBSTRING($1:reviewTime::STRING,4,2) END),
$1:reviewerID::STRING,
$1:reviewerName::STRING,
$1:summary::STRING,
DATE($1:unixReviewTime::int) Revewtime
FROM @MANAGE_DB.external_stages.json_folder)
   
    
// Validate results
SELECT * FROM MANAGE_DB.PUBLIC.reviews    